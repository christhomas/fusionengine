#ifndef _BITMAPFONT_H_
	#define _BITMAPFONT_H_

#include <Font/IFont.h>

class Overlay;
class Entity;

class BitmapFont: public IFont{
protected:
	char		*m_filename;
	Fusion	*m_fusion;
	Overlay	*m_characters;
	Entity	*m_entity;
	float		rgba[4];
	float		scale[2];
public:
								BitmapFont			(){};
	virtual				~BitmapFont			(){};
	virtual bool	Initialise			(char *fontfile, Fusion *f);
	virtual int		GetGlyphWidth		(void);
	virtual int		GetGlyphHeight	(void);
	virtual void	SetScale				(float x, float y);
	virtual void	SetColour				(float r, float g, float b, float a);
	virtual void	RenderString		(float x, float y, float depth, char *text,int len);
};

// these are character codes which are defined for use with the FontLib library
// supported keyboards = UK only (perhaps US too)

enum{
	PRINT_0 = 0,	PRINT_1, PRINT_2, PRINT_3, PRINT_4,						//	Numbers
	PRINT_5,			PRINT_6, PRINT_7, PRINT_8, PRINT_9, 

	PRINT_A,	PRINT_B,	PRINT_C,	PRINT_D,	PRINT_E,	PRINT_F,	//	Upper case Letters
	PRINT_G,	PRINT_H,	PRINT_I,	PRINT_J,	PRINT_K,	PRINT_L,	
	PRINT_M,	PRINT_N,	PRINT_O,	PRINT_P,	PRINT_Q,	PRINT_R,	
	PRINT_S,	PRINT_T,	PRINT_U,	PRINT_V,	PRINT_W,	PRINT_X,	
	PRINT_Y,	PRINT_Z,

	PRINT_a,	PRINT_b,	PRINT_c,	PRINT_d,	PRINT_e,	PRINT_f,	//	lower case letters
	PRINT_g,	PRINT_h,	PRINT_i,	PRINT_j,	PRINT_k,	PRINT_l,	
	PRINT_m,	PRINT_n,	PRINT_o,	PRINT_p,	PRINT_q,	PRINT_r,	
	PRINT_s,	PRINT_t,	PRINT_u,	PRINT_v,	PRINT_w,	PRINT_x,	
	PRINT_y,	PRINT_z,

	PRINT_SPACE,			PRINT_AT,						PRINT_HASH,					PRINT_EQUALS,
	PRINT_MINUS,			PRINT_RSQRBRACKET,	PRINT_LSQRBRACKET,	PRINT_LBRACE,
	PRINT_RBRACE,			PRINT_TILDE,				PRINT_LANGLEBRACKET,PRINT_RANGLEBRACKET,
	PRINT_BCKSLASH,		PRINT_FWDSLASH,			PRINT_BAR,					PRINT_COMMA,		
	PRINT_PERIOD,			PRINT_QUESTION,			PRINT_EXCLAIM,			PRINT_DBLQUOTE,			
	PRINT_POUND,			PRINT_DOLLAR,				PRINT_PERCENT,			PRINT_HAT,
	PRINT_AMPERSAND,	PRINT_ASTERISK,			PRINT_LBRACKET,			PRINT_RBRACKET
};

// these are special defines, they will be re-defined in later versions of 
// this file and subsequent updates and newer version to reflect any changes
// or additions/subtractions to the supported character set
#define NUMBERNUMERICALKEYS						10
#define NUMBERUPPERCASELETTERS				26
#define NUMBERLOWERCASELETTERS				26
#define NUMBERSPECIALKEYS							28

#define NUMBERDEFINEDKEYS							90

const char AsciiMapping[256] = { 
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_SPACE,
PRINT_EXCLAIM,
PRINT_DBLQUOTE,
PRINT_HASH,
PRINT_DOLLAR,
PRINT_PERCENT,
PRINT_AMPERSAND,
PRINT_0,
PRINT_LBRACKET,
PRINT_RBRACKET,
PRINT_ASTERISK,
PRINT_0,
PRINT_COMMA,
PRINT_MINUS,
PRINT_PERIOD,
PRINT_FWDSLASH,
PRINT_0,
PRINT_1,
PRINT_2,
PRINT_3,
PRINT_4,
PRINT_5,
PRINT_6,
PRINT_7,
PRINT_8,
PRINT_9,
PRINT_0,
PRINT_0,
PRINT_LANGLEBRACKET,
PRINT_EQUALS,
PRINT_RANGLEBRACKET,
PRINT_QUESTION,
PRINT_AT,
PRINT_A,
PRINT_B,
PRINT_C,
PRINT_D,
PRINT_E,
PRINT_F,
PRINT_G,
PRINT_H,
PRINT_I,
PRINT_J,
PRINT_K,
PRINT_L,
PRINT_M,
PRINT_N,
PRINT_O,
PRINT_P,
PRINT_Q,
PRINT_R,
PRINT_S,
PRINT_T,
PRINT_U,
PRINT_V,
PRINT_W,
PRINT_X,
PRINT_Y,
PRINT_Z,
PRINT_LSQRBRACKET,
PRINT_BCKSLASH,
PRINT_RSQRBRACKET,
PRINT_HAT,
PRINT_0,
PRINT_0,
PRINT_a,
PRINT_b,
PRINT_c,
PRINT_d,
PRINT_e,
PRINT_f,
PRINT_g,
PRINT_h,
PRINT_i,
PRINT_j,
PRINT_k,
PRINT_l,
PRINT_m,
PRINT_n,
PRINT_o,
PRINT_p,
PRINT_q,
PRINT_r,
PRINT_s,
PRINT_t,
PRINT_u,
PRINT_v,
PRINT_w,
PRINT_x,
PRINT_y,
PRINT_z,
PRINT_LBRACE,
PRINT_BAR,
PRINT_RBRACE,
PRINT_TILDE,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_POUND,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0,
PRINT_0
};

#endif